apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: gcloud-sql-export-bp 
  namespace: kanister
actions:
  backup:
    outputArtifacts:
      backupInfo:
        keyValue:
          export_name: "{{ .Phases.gcloudBackup.Output.export_name }}"
    phases:
    - func: KubeTask
      name: gcloudBackup  
      args:
        image: bullseie/gcloud-kanister-tools:1.0.0 
        command:
          - /bin/bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            # parse the variables
            instance_name='{{ index .Object.data "instance_name" | toString | b64dec }}'
            project_id='{{ index .Object.data "project_id" | toString | b64dec }}'
            bucket_name='{{ index .Object.data "bucket_name" | toString | b64dec }}'
            sa_key_json='{{ index .Object.data "json-file" | toString }}'
            echo $sa_key_json | base64 -d > /tmp/cloudsqlmanager-sa-key.json
            
            # authenticate to gcloud
            gcloud config set project ${project_id} --quiet
            gcloud auth activate-service-account --key-file=/tmp/cloudsqlmanager-sa-key.json --quiet

            # Validate if the specified cloud sql instance id is running
            instance_state=`gcloud sql instances describe ${instance_name} | grep state | awk '{print $2}'`
            if [ ${instance_state} != 'RUNNABLE' ]; then
              echo "Error: The specified instance is not in a Runnable state"
              exit 1
            else
              echo "Cloud SQL instance ${instance_name} is in Running state"
            fi
            
            # export the cloud sql instance
            bucket_prefix=cloudsql/${instance_name}
            export_name="${bucket_name}/${bucket_prefix}/`date +%m-%d-%Y-%H-%M-%S`-sqldumpfile.gz"
            gcloud sql export sql ${instance_name} gs://${export_name} --offload 
            kando output export_name ${export_name}

  restore:
    inputArtifactNames:
    - backupInfo 
    phases:
    - func: KubeTask
      name: gcloudRestore
      args:
        image: bullseie/gcloud-kanister-tools:1.0.0
        command:
          - /bin/bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            # parse the variables
            instance_name='{{ index .Object.data "instance_name" | toString | b64dec }}'
            project_id='{{ index .Object.data "project_id" | toString | b64dec }}'
            bucket_name='{{ index .Object.data "bucket_name" | toString | b64dec }}'
            sa_key_json='{{ index .Object.data "json-file" | toString }}'
            echo $sa_key_json | base64 -d > /tmp/cloudsqlmanager-sa-key.json
            export_name="{{ .ArtifactsIn.backupInfo.KeyValue.export_name }}" 
 
            # authenticate to gcloud
            gcloud config set project ${project_id} --quiet
            gcloud auth activate-service-account --key-file=/tmp/cloudsqlmanager-sa-key.json --quiet

            # Validate if the specified cloud sql instance id is running
            instance_state=`gcloud sql instances describe ${instance_name} | grep state | awk '{print $2}'`
            if [ ${instance_state} != 'RUNNABLE' ]; then
              echo "Error: The specified instance is not in a Runnable state"
              exit 1
            else
              echo "Cloud SQL instance ${instance_name} is in Running state"
            fi
            
            # import the cloud sql instance
            gcloud sql import sql k10sqlinst gs://${export_name}

  delete:
    inputArtifactNames:
    - backupInfo
    phases:
    - func: KubeTask
      name: gcloudDelete
      args:
        image: bullseie/gcloud-kanister-tools:1.0.0
        command:
          - /bin/bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            # parse the variables
            project_id='{{ index .Object.data "project_id" | toString | b64dec }}'
            sa_key_json='{{ index .Object.data "json-file" | toString }}'
            echo $sa_key_json | base64 -d > /tmp/cloudsqlmanager-sa-key.json
            export_name="{{ .ArtifactsIn.backupInfo.KeyValue.export_name }}"
            
            # authenticate to gcloud
            gcloud config set project ${project_id} --quiet
            gcloud auth activate-service-account --key-file=/tmp/cloudsqlmanager-sa-key.json --quiet

            # delete the gcloud sql export
            gsutil rm -r gs://${export_name}
